!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mk/.config/dmenu/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
$(OBJ)	./Makefile	/^$(OBJ): arg.h config.h config.mk drw.h$/;"	t
.c.o	./Makefile	/^.c.o:$/;"	t
ARGBEGIN	./arg.h	/^#define ARGBEGIN	/;"	d
ARGC	./arg.h	/^#define ARGC(/;"	d
ARGEND	./arg.h	/^#define ARGEND	/;"	d
ARGF	./arg.h	/^#define ARGF(/;"	d
ARG_H__	./arg.h	/^#define ARG_H__$/;"	d
BETWEEN	./util.h	/^#define BETWEEN(/;"	d
CC	./config.mk	/^CC = cc$/;"	m
CFLAGS	./config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Os $(INCS) $(CPPFLAGS)$/;"	m
CPPFLAGS	./config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L -DVERSI/;"	m
Clr	./drw.h	/^typedef XftColor Clr;$/;"	t	typeref:typename:XftColor
ColBg	./drw.h	/^enum { ColFg, ColBg }; \/* Clr scheme index *\/$/;"	e	enum:__anon4dab13c50203
ColFg	./drw.h	/^enum { ColFg, ColBg }; \/* Clr scheme index *\/$/;"	e	enum:__anon4dab13c50203
Cur	./drw.h	/^} Cur;$/;"	t	typeref:struct:__anon4dab13c50108
DESCRIPTION	./dmenu.1	/^.SH DESCRIPTION$/;"	s	title:DMENU
DESCRIPTION	./stest.1	/^.SH DESCRIPTION$/;"	s	title:STEST
DMENU	./dmenu.1	/^.TH DMENU 1 dmenu\\-VERSION$/;"	t
Drw	./drw.h	/^} Drw;$/;"	t	typeref:struct:__anon4dab13c50308
EARGF	./arg.h	/^#define EARGF(/;"	d
EXIT	./stest.1	/^.SH EXIT STATUS$/;"	s	title:STEST
FLAG	./stest.c	/^#define FLAG(/;"	d	file:
FREETYPEINC	./config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	./config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	./drw.h	/^typedef struct Fnt {$/;"	s
Fnt	./drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
INCS	./config.mk	/^INCS = -I$(X11INC) -I$(FREETYPEINC)$/;"	m
INTERSECT	./dmenu.c	/^#define INTERSECT(/;"	d	file:
LDFLAGS	./config.mk	/^LDFLAGS  = $(LIBS)$/;"	m
LENGTH	./dmenu.c	/^#define LENGTH(/;"	d	file:
LIBS	./config.mk	/^LIBS = -L$(X11LIB) -lX11 $(XINERAMALIBS) $(FREETYPELIBS)$/;"	m
MANPREFIX	./config.mk	/^MANPREFIX = $(PREFIX)\/share\/man$/;"	m
MAX	./util.h	/^#define MAX(/;"	d
MIN	./util.h	/^#define MIN(/;"	d
NAME	./dmenu.1	/^.SH NAME$/;"	s	title:DMENU
NAME	./stest.1	/^.SH NAME$/;"	s	title:STEST
OBJ	./Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OPTIONS	./dmenu.1	/^.SH OPTIONS$/;"	s	title:DMENU
OPTIONS	./stest.1	/^.SH OPTIONS$/;"	s	title:STEST
PREFIX	./config.mk	/^PREFIX = \/usr\/local$/;"	m
SEE	./dmenu.1	/^.SH SEE ALSO$/;"	s	title:DMENU
SEE	./stest.1	/^.SH SEE ALSO$/;"	s	title:STEST
SRC	./Makefile	/^SRC = drw.c dmenu.c stest.c util.c$/;"	m
STEST	./stest.1	/^.TH STEST 1 dmenu\\-VERSION$/;"	t
SYNOPSIS	./dmenu.1	/^.SH SYNOPSIS$/;"	s	title:DMENU
SYNOPSIS	./stest.1	/^.SH SYNOPSIS$/;"	s	title:STEST
SchemeLast	./dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon57f2eaac0103	file:
SchemeNorm	./dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon57f2eaac0103	file:
SchemeOut	./dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon57f2eaac0103	file:
SchemeSel	./dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon57f2eaac0103	file:
TEXTW	./dmenu.c	/^#define TEXTW(/;"	d	file:
USAGE	./dmenu.1	/^.SH USAGE$/;"	s	title:DMENU
UTF_INVALID	./drw.c	/^#define UTF_INVALID /;"	d	file:
UTF_SIZ	./drw.c	/^#define UTF_SIZ /;"	d	file:
VERSION	./config.mk	/^VERSION = 5.0$/;"	m
X11INC	./config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	./config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMAFLAGS	./config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	./config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
__anon4dab13c50108	./drw.h	/^typedef struct {$/;"	s
__anon4dab13c50203	./drw.h	/^enum { ColFg, ColBg }; \/* Clr scheme index *\/$/;"	g
__anon4dab13c50308	./drw.h	/^typedef struct {$/;"	s
__anon57f2eaac0103	./dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	g	file:
all	./Makefile	/^all: options dmenu stest$/;"	t
appenditem	./dmenu.c	/^appenditem(struct item *item, struct item **list, struct item **last)$/;"	f	typeref:typename:void	file:
argv0	./stest.c	/^char *argv0;$/;"	v	typeref:typename:char *
bh	./dmenu.c	/^static int bh, mw, mh;$/;"	v	typeref:typename:int	file:
border_width	./config.def.h	/^static unsigned int border_width = 0;$/;"	v	typeref:typename:unsigned int
border_width	./config.h	/^static unsigned int border_width = 0;$/;"	v	typeref:typename:unsigned int
calcoffsets	./dmenu.c	/^calcoffsets(void)$/;"	f	typeref:typename:void	file:
centered	./config.def.h	/^static int centered = 0;                    \/* -c option; centers dmenu on screen *\/$/;"	v	typeref:typename:int
centered	./config.h	/^static int centered = 0;                    \/* -c option; centers dmenu on screen *\/$/;"	v	typeref:typename:int
cistrstr	./dmenu.c	/^cistrstr(const char *s, const char *sub)$/;"	f	typeref:typename:char *	file:
clean	./Makefile	/^clean:$/;"	t
cleanup	./dmenu.c	/^cleanup(void)$/;"	f	typeref:typename:void	file:
clip	./dmenu.c	/^static Atom clip, utf8;$/;"	v	typeref:typename:Atom	file:
colors	./config.def.h	/^static const char *colors[SchemeLast][2] = {$/;"	v	typeref:typename:const char * [][2]
colors	./config.h	/^static const char *colors[SchemeLast][2] = {$/;"	v	typeref:typename:const char * [][2]
config.h	./Makefile	/^config.h:$/;"	t
curr	./dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:item *	file:
cursor	./dmenu.c	/^static size_t cursor;$/;"	v	typeref:typename:size_t	file:
cursor	./drw.h	/^	Cursor cursor;$/;"	m	struct:__anon4dab13c50108	typeref:typename:Cursor
die	./util.c	/^die(const char *fmt, ...) {$/;"	f	typeref:typename:void
dist	./Makefile	/^dist: clean$/;"	t
dmenu	./Makefile	/^dmenu: dmenu.o drw.o util.o$/;"	t
dmw	./dmenu.c	/^static unsigned int dmw = 0; \/* make dmenu this wide *\/$/;"	v	typeref:typename:unsigned int	file:
dmx	./dmenu.c	/^static int dmx = 0; \/* put dmenu at this x offset *\/$/;"	v	typeref:typename:int	file:
dmy	./dmenu.c	/^static int dmy = 0; \/* put dmenu at this y offset (measured from the bottom if topbar is 0) *\/$/;"	v	typeref:typename:int	file:
dpy	./dmenu.c	/^static Display *dpy;$/;"	v	typeref:typename:Display *	file:
dpy	./drw.h	/^	Display *dpy;$/;"	m	struct:Fnt	typeref:typename:Display *
dpy	./drw.h	/^	Display *dpy;$/;"	m	struct:__anon4dab13c50308	typeref:typename:Display *
drawable	./drw.h	/^	Drawable drawable;$/;"	m	struct:__anon4dab13c50308	typeref:typename:Drawable
drawitem	./dmenu.c	/^drawitem(struct item *item, int x, int y, int w)$/;"	f	typeref:typename:int	file:
drawmenu	./dmenu.c	/^drawmenu(void)$/;"	f	typeref:typename:void	file:
drw	./dmenu.c	/^static Drw *drw;$/;"	v	typeref:typename:Drw *	file:
drw_clr_create	./drw.c	/^drw_clr_create(Drw *drw, Clr *dest, const char *clrname)$/;"	f	typeref:typename:void
drw_create	./drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)$/;"	f	typeref:typename:Drw *
drw_cur_create	./drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f	typeref:typename:Cur *
drw_cur_free	./drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f	typeref:typename:void
drw_font_getexts	./drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h/;"	f	typeref:typename:void
drw_fontset_create	./drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f	typeref:typename:Fnt *
drw_fontset_free	./drw.c	/^drw_fontset_free(Fnt *font)$/;"	f	typeref:typename:void
drw_fontset_getwidth	./drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f	typeref:typename:unsigned int
drw_free	./drw.c	/^drw_free(Drw *drw)$/;"	f	typeref:typename:void
drw_map	./drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_rect	./drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f	typeref:typename:void
drw_resize	./drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_scm_create	./drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	f	typeref:typename:Clr *
drw_setfontset	./drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f	typeref:typename:void
drw_setscheme	./drw.c	/^drw_setscheme(Drw *drw, Clr *scm)$/;"	f	typeref:typename:void
drw_text	./drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char */;"	f	typeref:typename:int
ecalloc	./util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
embed	./dmenu.c	/^static char *embed;$/;"	v	typeref:typename:char *	file:
flag	./stest.c	/^static int flag[26];$/;"	v	typeref:typename:int[26]	file:
fonts	./config.def.h	/^static const char *fonts[] = {$/;"	v	typeref:typename:const char * []
fonts	./config.h	/^static const char *fonts[] = {$/;"	v	typeref:typename:const char * []
fonts	./drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon4dab13c50308	typeref:typename:Fnt *
fstrncmp	./dmenu.c	/^static int (*fstrncmp)(const char *, const char *, size_t) = strncmp;$/;"	v	typeref:typename:int (*)(const char *,const char *,size_t)	file:
fstrstr	./dmenu.c	/^static char *(*fstrstr)(const char *, const char *) = strstr;$/;"	v	typeref:typename:char * (*)(const char *,const char *)	file:
gc	./drw.h	/^	GC gc;$/;"	m	struct:__anon4dab13c50308	typeref:typename:GC
grabfocus	./dmenu.c	/^grabfocus(void)$/;"	f	typeref:typename:void	file:
grabkeyboard	./dmenu.c	/^grabkeyboard(void)$/;"	f	typeref:typename:void	file:
h	./drw.h	/^	unsigned int h;$/;"	m	struct:Fnt	typeref:typename:unsigned int
h	./drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon4dab13c50308	typeref:typename:unsigned int
inputw	./dmenu.c	/^static int inputw = 0, promptw;$/;"	v	typeref:typename:int	file:
insert	./dmenu.c	/^insert(const char *str, ssize_t n)$/;"	f	typeref:typename:void	file:
install	./Makefile	/^install: all$/;"	t
item	./dmenu.c	/^struct item {$/;"	s	file:
items	./dmenu.c	/^static struct item *items = NULL;$/;"	v	typeref:struct:item *	file:
keypress	./dmenu.c	/^keypress(XKeyEvent *ev)$/;"	f	typeref:typename:void	file:
left	./dmenu.c	/^	struct item *left, *right;$/;"	m	struct:item	typeref:struct:item *	file:
lineheight	./config.def.h	/^static unsigned int lineheight = 0;$/;"	v	typeref:typename:unsigned int
lineheight	./config.h	/^static unsigned int lineheight = 0;$/;"	v	typeref:typename:unsigned int
lines	./config.def.h	/^static unsigned int lines      = 0;$/;"	v	typeref:typename:unsigned int
lines	./config.h	/^static unsigned int lines      = 0;$/;"	v	typeref:typename:unsigned int
lrpad	./dmenu.c	/^static int lrpad; \/* sum of left and right padding *\/$/;"	v	typeref:typename:int	file:
main	./dmenu.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	./stest.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
match	./dmenu.c	/^match(void)$/;"	f	typeref:typename:void	file:
match	./stest.c	/^static int match = 0;$/;"	v	typeref:typename:int	file:
matchend	./dmenu.c	/^static struct item *matches, *matchend;$/;"	v	typeref:struct:item *	file:
matches	./dmenu.c	/^static struct item *matches, *matchend;$/;"	v	typeref:struct:item *	file:
max_textw	./dmenu.c	/^max_textw(void)$/;"	f	typeref:typename:int	file:
mh	./dmenu.c	/^static int bh, mw, mh;$/;"	v	typeref:typename:int	file:
min_lineheight	./config.def.h	/^static unsigned int min_lineheight = 8;$/;"	v	typeref:typename:unsigned int
min_lineheight	./config.h	/^static unsigned int min_lineheight = 8;$/;"	v	typeref:typename:unsigned int
min_width	./config.def.h	/^static int min_width = -200;                    \/* minimum width when centered *\/$/;"	v	typeref:typename:int
min_width	./config.h	/^static int min_width = -200;                    \/* minimum width when centered *\/$/;"	v	typeref:typename:int
mon	./dmenu.c	/^static int mon = -1, screen;$/;"	v	typeref:typename:int	file:
movewordedge	./dmenu.c	/^movewordedge(int dir)$/;"	f	typeref:typename:void	file:
mw	./dmenu.c	/^static int bh, mw, mh;$/;"	v	typeref:typename:int	file:
new	./stest.c	/^static struct stat old, new;$/;"	v	typeref:struct:stat	file:
next	./dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:item *	file:
next	./drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt *
nextrune	./dmenu.c	/^nextrune(int inc)$/;"	f	typeref:typename:size_t	file:
old	./stest.c	/^static struct stat old, new;$/;"	v	typeref:struct:stat	file:
options	./Makefile	/^options:$/;"	t
out	./dmenu.c	/^	int out;$/;"	m	struct:item	typeref:typename:int	file:
parentwin	./dmenu.c	/^static Window root, parentwin, win;$/;"	v	typeref:typename:Window	file:
paste	./dmenu.c	/^paste(void)$/;"	f	typeref:typename:void	file:
pattern	./drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt	typeref:typename:FcPattern *
prev	./dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:item *	file:
prompt	./config.def.h	/^static const char *prompt      = NULL;      \/* -p  option; prompt to the left of input field *\/$/;"	v	typeref:typename:const char *
prompt	./config.h	/^static const char *prompt      = NULL;      \/* -p  option; prompt to the left of input field *\/$/;"	v	typeref:typename:const char *
promptw	./dmenu.c	/^static int inputw = 0, promptw;$/;"	v	typeref:typename:int	file:
readstdin	./dmenu.c	/^readstdin(void)$/;"	f	typeref:typename:void	file:
right	./dmenu.c	/^	struct item *left, *right;$/;"	m	struct:item	typeref:struct:item *	file:
root	./dmenu.c	/^static Window root, parentwin, win;$/;"	v	typeref:typename:Window	file:
root	./drw.h	/^	Window root;$/;"	m	struct:__anon4dab13c50308	typeref:typename:Window
run	./dmenu.c	/^run(void)$/;"	f	typeref:typename:void	file:
scheme	./dmenu.c	/^static Clr *scheme[SchemeLast];$/;"	v	typeref:typename:Clr * []	file:
scheme	./drw.h	/^	Clr *scheme;$/;"	m	struct:__anon4dab13c50308	typeref:typename:Clr *
screen	./dmenu.c	/^static int mon = -1, screen;$/;"	v	typeref:typename:int	file:
screen	./drw.h	/^	int screen;$/;"	m	struct:__anon4dab13c50308	typeref:typename:int
sel	./dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:item *	file:
setup	./dmenu.c	/^setup(void)$/;"	f	typeref:typename:void	file:
sortmatches	./dmenu.c	/^static bool sortmatches = true;$/;"	v	typeref:typename:bool	file:
stest	./Makefile	/^stest: stest.o$/;"	t
test	./stest.c	/^test(const char *path, const char *name)$/;"	f	typeref:typename:void	file:
text	./dmenu.c	/^	char *text;$/;"	m	struct:item	typeref:typename:char *	file:
text	./dmenu.c	/^static char text[BUFSIZ] = "";$/;"	v	typeref:typename:char[]	file:
topbar	./config.def.h	/^static int topbar = 1;                      \/* -b  option; if 0, dmenu appears at bottom     *\/$/;"	v	typeref:typename:int
topbar	./config.h	/^static int topbar = 1;                      \/* -b  option; if 0, dmenu appears at bottom     *\/$/;"	v	typeref:typename:int
uninstall	./Makefile	/^uninstall:$/;"	t
usage	./dmenu.c	/^usage(void)$/;"	f	typeref:typename:void	file:
usage	./stest.c	/^usage(void)$/;"	f	typeref:typename:void	file:
utf8	./dmenu.c	/^static Atom clip, utf8;$/;"	v	typeref:typename:Atom	file:
utf8decode	./drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	typeref:typename:size_t	file:
utf8decodebyte	./drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	typeref:typename:long	file:
utf8validate	./drw.c	/^utf8validate(long *u, size_t i)$/;"	f	typeref:typename:size_t	file:
utfbyte	./drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmask	./drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmax	./drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	typeref:typename:const long[]	file:
utfmin	./drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	typeref:typename:const long[]	file:
w	./drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon4dab13c50308	typeref:typename:unsigned int
win	./dmenu.c	/^static Window root, parentwin, win;$/;"	v	typeref:typename:Window	file:
worddelimiters	./config.def.h	/^static const char worddelimiters[] = " ";$/;"	v	typeref:typename:const char[]
worddelimiters	./config.h	/^static const char worddelimiters[] = " ";$/;"	v	typeref:typename:const char[]
xfont	./drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt	typeref:typename:XftFont *
xfont_create	./drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	typeref:typename:Fnt *	file:
xfont_free	./drw.c	/^xfont_free(Fnt *font)$/;"	f	typeref:typename:void	file:
xic	./dmenu.c	/^static XIC xic;$/;"	v	typeref:typename:XIC	file:
